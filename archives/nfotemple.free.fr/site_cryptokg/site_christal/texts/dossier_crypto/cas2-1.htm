<html><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
	<META NAME="GENERATOR" Content="Visual Page 2.0 for Windows - Trial Version">
	<TITLE>untitled</TITLE>
</HEAD>

<BODY BACKGROUND="spirbind2.gif" tppabs="http://christalmirror.ifrance.com/assembly/dossier10/images/spirbind2.gif" BGCOLOR="#FFFFCC">

<PRE ALIGN="CENTER"></PRE>
<PRE ALIGN="CENTER"></PRE>
<P ALIGN="CENTER"><B><FONT SIZE="5" FACE="Arial Black">Reverse de Crypto v3.5 de Gr&eacute;goire Braun</FONT></B><FONT
SIZE="4" FACE="Arial Black"><BR>
Par<BR>
CASIMIR</FONT></P>

<BLOCKQUOTE>
	<PRE><U><FONT SIZE="2" FACE="Arial">Partie A</FONT></U><FONT SIZE="2" FACE="Arial">
Sommaire:
  Introduction
  De quoi ai-je besoin ?
  Vue de l'ext&eacute;rieure

  PART A. REVERSING OF BRAUN'S CRYPTO V3.5
       A1. Input handling 
       A2. Hash tables and the making of KEY_0
       A3. The making of KEY_1
       A4. The making of KEY_2
       A5. The check routine
       A6. The decryption process</FONT></PRE>
	<PRE><FONT SIZE="2" FACE="Arial">  </FONT><A HREF="caz6b-1.htm" tppabs="http://christalmirror.ifrance.com/assembly/dossier10/fichiers/caz6b.htm"><FONT SIZE="2" FACE="Arial">PART B. ANALYSIS AND BREAKING OF BRAUN'S CRYPTO V3.5</FONT></A><FONT
	SIZE="2" FACE="Arial">
       B1. The recovery of KEY_1
            B11. Method 1
            B12. Method 2
            B13. Method 2 vs Method 1
       B2. The recovery of KEY_0 and PASSWORD
            B21. Feasibility
            B22. Unicity
            B23. KEY_0's range
            B24. Reduced ASCII Character Set
            B25. Choosing suitable Password's length(s)
            B26. Building a Password
       B3. Benchmark
      
  PART C. 'C' SOURCE FOR CRACKER</FONT></PRE>
</BLOCKQUOTE>

<P><FONT SIZE="2" FACE="Arial">Braun pr&eacute;tend employer l'algorithme BlowFish pour produire un cryptage s&ucirc;r
de Crypto v3.5. En r&eacute;alit&eacute; l'algorithme employ&eacute; est assez faible.<BR>
Pour d&eacute;crypter un fichier, Crypto v3.5 utilise un Mot de passe et, en fonction d'un hash fait maison, produit
une clef 32 bits : KEY_1. KEY_1 qui est manipul&eacute;e (des manipulations ANDs) pour produire une deuxi&egrave;me
clef 32 bits : KEY_2. KEY_2 est compar&eacute;e contre une troisi&egrave;me clef 32 bits : KEY_CHK, qui est stock&eacute;e
dans le header du fichier chiffr&eacute;. Si KEY_2 = KEY_CHK, alors Crypto v3.5 d&eacute;crypte le fichier, employant
KEY_1 comme clef de d&eacute;cryptage.<BR>
La faiblesse de Crypto v3.5 vient du fait que : <BR>
- Donnant KEY_CHK, KEY_1 peut &ecirc;tre facilement et rapidement devin&eacute; (vous n'avez pas besoin d'essayer
2^32 KEY_1 possibilit&eacute;s, approximativement 500000 essais sont suffisant dans chaque cas);<BR>
- Donnant KEY_1, un Mot de passe peut &ecirc;tre facilement et rapidement contrefait (ce n'est m&ecirc;me pas obligatoire,
puisque crypto v3.5 emploie KEY_1 comme clef de d&eacute;cryptage). <BR>
</FONT><FONT SIZE="2" FACE="Courier New"><BR>
</FONT><B><U><FONT SIZE="2" FACE="Arial">De quoi ai-je besoin ?</FONT></U></B><FONT SIZE="2" FACE="Arial"><BR>
Cible : Crypto v3.5 crypto.exe : 188416 octets Crypto 3.5</FONT></P>

<P><B><FONT SIZE="2" FACE="Arial">Outils n&eacute;cessaires :</FONT></B><FONT SIZE="2" FACE="Arial"> <BR>
Winice par Nu-Mega, un &eacute;diteur hexad&eacute;cimal, une table d'ASCII avec les valeurs hexad&eacute;cimales
des caract&egrave;res et une bonne calculatrice : Excalibur 32 bits par David Bernazzani (Cette calculatrice a
une quantit&eacute; &eacute;tonnante de fonctions incorpor&eacute;es, comme ROL et ROR. <BR>
</FONT><FONT SIZE="2" FACE="Courier New"><BR>
</FONT><B><U><FONT FACE="Arial">Vue de l'ext&eacute;rieur</FONT></U></B><FONT SIZE="2" FACE="Courier New"><BR>
</FONT><FONT SIZE="2" FACE="Arial">BIEN, avant de commencer le reverse de ce programme, commen&ccedil;ons par jouer
un peu avec lui. Chiffrez des fichiers divers avec des tailles et de contenus diff&eacute;rents, des longueurs
de noms et de mots de passe variables. Examinez-les maintenant avec Hex Workshop : vous remarquerz que Crypto ajoute
276 octets &agrave; chaque fichier chiffr&eacute;, quel que soit le mot de passe utilis&eacute;. Crypto ne semble
pas ex&eacute;cuter de compression avant le cryptage, il n'ajoute probablement pas d'&eacute;l&eacute;ments al&eacute;atoires
au fichier (la taille des fichiers varierait beaucoup plus). Donc nous pouvons assumer que :</FONT></P>
<PRE><FONT SIZE="2" FACE="Courier New">                             encryption
 1 caract&egrave;re du plaintext ----------------&gt; 1 caract&egrave;re du ciphertext  

Ces 276 bytes constituent le header, qui a la structure suivante:

        CryptoHdrBlk????pathfilename.............encryptedfile
        &lt;------------- 276 bytes ---------------&gt;&lt;  original &gt;
                                                      size</FONT></PRE>
<P><FONT SIZE="2" FACE="Arial">Huuummmm... Ces 4 caract&egrave;res myst&eacute;rieux entre l'emplacement original
et le nom de fichier ont titill&eacute; mon int&eacute;r&ecirc;t. Leurs valeurs semblent &ecirc;tre li&eacute;es
&agrave; la fonction du mot de passe, mais ils ne d&eacute;pendent pas du contenu du plaintext. Ce serait une place
agr&eacute;able pour un mot de passe chiffr&eacute; (en fait ce ne sera pas le cas…).<BR>
<BR>
Puisque Braun a employ&eacute; un algorithme fait maison (et a oubli&eacute; de nous en donner la recette {:),
nous devrons changer compl&egrave;tement son programme. Pr&eacute;parez un fichier d'essai : braun.txt avec un
contenu : ABCDEF (6 octets, MAJUSCULE). Chiffrez-le avec le pwd : CASIMIR (MAJUSCULE), vous obtiendrez un fichier
chiffr&eacute; braun. (= txt =)</FONT></P>
<PRE><FONT SIZE="2" FACE="Courier New">Dump de braun.txt :

00000000 43 72 79 70 74 6F 48 64 72 42 6C 6B 92 F4 F6 6B CryptoHdrBlk... K 
00000010 43 3A 5C 43 52 59 50 54 4F 32 5C 64 65 66 69 5C C:\CRYPTO2\defi\ 
00000020 62 72 61 75 6E 2E 74 78 74 00 00 00 00 00 00 00 braun.txt.. ...... 
00000030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 
00000040 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 
00000050 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 
00000060 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 
00000070 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 
00000080 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 
00000090 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 
000000A0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 
000000B0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 
000000C0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 
000000D0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 
000000E0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 
000000F0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 
00000100 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 
00000110 00 00 00 00 B1 3E 3E 18 12 A7..... &gt; &gt;...    </FONT></PRE>
<PRE><FONT SIZE="2" FACE="Arial">Excellent!
Ce fichier de 282 octets sera notre base de r&eacute;f&eacute;rence pendant le reverse  du processus, donc sauvegardez-le.</FONT></PRE>
<P><B><U><FONT FACE="Arial">PARTIE A. REVERSE DE BRAUN'S CRYPTO V3.5</FONT></U></B></P>
<P><B><FONT SIZE="2" FACE="Arial">======================<BR>
A1. Traitement des entr&eacute;es<BR>
======================</FONT></B><FONT SIZE="2" FACE="Arial"><BR>
Comme d'habitude, je prendrai une approche Live : j'emploierai Winice pour d&eacute;couvrir ce qui arrive &agrave;
mon entr&eacute;e. Choisissez le fichier braun. (= txt =) pour le d&eacute;cryptage, entrez un faux mot de passe
: 13579 (n'employez pas 012345... cet ordre est souvent pr&eacute;sent en m&eacute;moire). Avant la v&eacute;rification
du pwd, mettez des BPXS sous Softice aux fonctions de Windows qui sont d'habitude employ&eacute;es pour la saisie
d'info. Cette fois la fonction GetDlgItemTextA fonctione et voici ce que nous voyons :</FONT></P>
<PRE><FONT SIZE="2" FACE="Courier New">...
CS:405EB2    mov ebx,[USER32!GetDlgItemTextA]
CS:405EB8    push 100
CS:405EBD    push eax    &lt;-- Watch out! Input is copied to DS:EAX
CS:405EBE    push 65
CS:405EC0    push esi
CS:405EC1    call ebx    &lt;-- get input and copy it to DS:EAX  ...</FONT></PRE>
<P><B><FONT SIZE="2" FACE="Arial">==================================== <BR>
A2. Tables de hash et la fabrication de KEY_0<BR>
====================================</FONT></B></P>
<P><FONT SIZE="2" FACE="Arial">Mettez un BPR DS:EAX EAX+5 RW pour savoir o&ugrave; et quand votre entr&eacute;e
est employ&eacute;e. L'entr&eacute;e est lue dans CS:405EE0 (ne me demandez pas pourquoi), et nous arrivons &agrave;
la partie int&eacute;ressante :</FONT></P>
<PRE><FONT SIZE="2" FACE="Courier New">* R&eacute;f&eacute;rence : KERNEL32.lstrlenA, Ord:029Ch   
:0040CD68 xor edi,edi &lt;-- edi=0 
:0040CD6A push esi 
:0040CD6B Call dword ptr [0042D48C] &lt;-- return input's length in eax 
:0040CD71 test esi, esi 
:0040CD73 je 0040CDA7 
:0040CD75 test eax, eax 
:0040CD77 je 0040CDA7
:0040CD79 mov ecx, 00000000
:0040CD7E jle 0040CDA7 </FONT></PRE>
<P><FONT SIZE="2" FACE="Arial">Avant d'aller plus loin, remarquez que Crypto emploi 2 tables de hash :</FONT></P>
<PRE><FONT SIZE="2" FACE="Courier New">- HashTable_1 starting at DS:41DDF8</FONT></PRE>

<BLOCKQUOTE>
	<BLOCKQUOTE>
		<BLOCKQUOTE>
			<PRE><FONT SIZE="2" FACE="Courier New">23 73 65 72 42 26 6E 7A
7C 6D 66 4D 31 2F 35 28	
21 73 64 24 4D 71 2E 7B
73 5D 2B 73 46 6A 74 4B			
70 7A 53 64 74 7A 6F 58
71 6D 62 5E 41 6C 40 64	
76 3A 73 3F 78 2F 00 00
7C 62 21 70 7A 2A 6C 73	
3B 72 6E 7C 6C 66 24 76
69 5E 41 78 70 65 29 72
78 35 61 69 63 26 39 2F
32 6D 35 6C 73 69 34 40
30 64 6D 5A 77 39 34 63
6D 71 70 66 68 77 00 00</FONT></PRE>
		</BLOCKQUOTE>
	</BLOCKQUOTE>
</BLOCKQUOTE>

<PRE><FONT SIZE="2" FACE="Courier New">   - HashTable_2 starting at DS:41DE30	</FONT></PRE>

<BLOCKQUOTE>
	<PRE><FONT SIZE="2" FACE="Courier New">            7C 62 21 70 7A 2A 6C 73
            3B 72 6E 7C 6C 66 24 76
            69 5E 41 78 70 65 29 72
            78 35 61 69 63 26 39 2F
            32 6D 35 6C 73 69 34 40
            30 64 6D 5A 77 39 34 63
            6D 71 70 66 68 77 00 00</FONT></PRE>
</BLOCKQUOTE>

<P><FONT SIZE="2" FACE="Arial">Ces tables sont toujours les m&ecirc;mes, et ne d&eacute;pendent pas de l'entr&eacute;e
ou plaintext.</FONT></P>

<BLOCKQUOTE>
	<PRE><FONT SIZE="2" FACE="Courier New">***&gt;:0040CD80  movsx ebx, byte ptr [eax+ecx+0041DDF8] &lt;-- read 1 character
*                                                         from HashTable_1
*   :0040CD88  movsx ebp, byte ptr [esi+ecx]          &lt;-- read 1 character from input
*   :0040CD8C  lea edx, dword ptr [ecx+01]            &lt;-- edx=ecx+1
* L :0040CD8F  imul ebx, ebp
* O :0040CD92  movsx ecx, byte ptr [ecx+0041DE30]     &lt;-- read 1 character from 
* O                                                       HashTable_2
* P :0040CD99  imul ebx, ecx
*   :0040CD9C  imul ebx, edx
*   :0040CD9F  add edi, ebx                           &lt;-- edi=accumulator 
*   :0040CDA1  mov ecx, edx
*   :0040CDA3  cmp eax, edx
***&lt;:0040CDA5  jg 0040CD80                            &lt;-- loop eax (5) times
    :0040CDA7  mov eax, edi
    :0040CDA9  pop ebp
    :0040CDAA  pop edi
    :0040CDAB  pop esi
    :0040CDAC  pop ebx
    :0040CDAD  ret</FONT></PRE>
</BLOCKQUOTE>

<P><FONT SIZE="2" FACE="Arial">En r&eacute;sum&eacute;, nous avons length=len de l'entr&eacute;e :</FONT></P>
<PRE><FONT SIZE="2" FACE="Courier New">edi = HashTable_1[len+1]   * HashTable_2[1]   * 1   * Input[1]      +
      HashTable_1[len+2]   * HashTable_2[2]   * 2   * Input[2]      +
      ...                                                           +     </FONT></PRE>
<PRE><FONT SIZE="2" FACE="Courier New">      HashTable_1[len+len] * HashTable_2[len] * len * Input[len]</FONT></PRE>
<PRE><FONT SIZE="2" FACE="Courier New">
let Coef[i] = HashTable_1[len+i] * HashTable_2[i] * i ,</FONT></PRE>
<P><FONT SIZE="2" FACE="Arial">nous avons:</FONT></P>
<PRE><FONT SIZE="2" FACE="Courier New">edi = Coef[1]*Input[1] + Coef[2]*Input[2] + ... + Coef[len]*Input[len]</FONT></PRE>
<P><FONT SIZE="2" FACE="Arial">par exemple, avec l'entr&eacute;e: 13579, on obtient: edi=0x00868500 <BR>
<BR>
Il y a quelque chose d'int&eacute;ressant du point de vue du cracker : les coefficients d&eacute;pendent seulement
de la longueur de l'entr&eacute;e. Cela signifie que, pour la longueur d'une entr&eacute;e donn&eacute;e, nous
pouvons pr&eacute; calculer chaque coefficient. Il nous &eacute;pargnera beaucoup de temps de calcul pendant le
reverse du processus.<BR>
Nous appellerons la valeur d'edi : KEY_0 dor&eacute;navant.</FONT></P>
<P><B><FONT SIZE="2" FACE="Arial">====================== <BR>
A3. La fabrication de KEY_1<BR>
======================</FONT></B></P>
<P><FONT SIZE="2" FACE="Arial">Ensuite KEY_0 est copi&eacute; dans eax (CS:40CDA7) et eax est copi&eacute; dans
DS:42A0F0. Comme d'habitude, nous examinons cet emplacement m&eacute;moire et d&eacute;couvrons que la valeur est
copi&eacute;e dans CS:405D4C et CS:402282. Mais le traitement le plus important arrive dans CS:402AC4 :</FONT></P>
<PRE><FONT SIZE="2" FACE="Courier New">CS:402AC4 or [esi],06A30DE8 // DS:[esi] contains KEY_0
                                        06A30DE8 is a constant</FONT></PRE>
<P><FONT SIZE="2" FACE="Arial">Nous obtenons une nouvelle clef de 4 octets, KEY_1 :</FONT></P>
<PRE><FONT SIZE="2" FACE="Courier New">KEY_1 = KEY_0 ou 06A30DE8     
            = 00868500 ou 06A30DE8        
            = 06A78DE8</FONT></PRE>
<P><B><FONT SIZE="2" FACE="Arial">====================== <BR>
A4. La fabrication de KEY_2<BR>
======================</FONT></B></P>
<P><FONT SIZE="2" FACE="Arial">KEY_1 est utilis&eacute; dans le call suivant :</FONT></P>
<PRE><FONT SIZE="2" FACE="Courier New">:0040B2F0    push esi:0040B2F1    push edi
:0040B2F2    mov esi, dword ptr [esp+0C]  // copy KEY_1 to esi
:0040B2F6    push esi
:0040B2F7    call 00411450                // copy KEY_1 to DS:4205F4
:0040B2FC    add esp, 00000004</FONT></PRE>
<PRE><FONT SIZE="2" FACE="Courier New">:0040B2FF    call 00411460      // first_call
:0040B304    mov edi, eax       // eax=00001799 (see first_call walk-thru)
:0040B306    call 00411460      // second_call
:0040B30B    shl eax, 00000010  // eax=00004411 (see second_call walk-thru)  
:0040B30E    add eax, edi       // eax = 44110000+00001799 = 44111799
:0040B310    pop edi
:0040B311    add eax, esi       // add KEY_1 to eax, giving KEY_2:
                                // KEY_2 = 06A78DE8 + 44111799 = 4AB8A581
:0040B313    pop esi:0040B314    ret</FONT></PRE>
<P><FONT SIZE="2" FACE="Arial">Voyons ce qui se passe dans ce premier call en CS:411460</FONT></P>
<PRE><FONT SIZE="2" FACE="Courier New">First_call
----------
:00411460    mov eax, [004205F4]              // copy KEY_1 to eax
:00411465    lea ecx, dword ptr [eax+4*eax]   // ecx = 5*eax
:00411468    lea ecx, dword ptr [ecx+4*ecx]   // ecx = 5*ecx = 19*eax 
:0041146B    add ecx, eax                     // ecx = 1A*eax
:0041146D    lea ecx, dword ptr [eax+8*ecx]   // ecx = eax+8*1A*eax = D1*eax
:00411470    shl ecx, 00000008                // ecx = 100*ecx = D100*eax
:00411473    sub ecx, eax                     // ecx = ecx-eax = D0FF*eax
:00411475    lea eax, dword ptr [eax+4*ecx+269EC3] // eax = 343FD*eax+269EC3 
:0041147C    mov [004205F4], eax                   // copy KEY_TMP_1 = eax to DS:4205F4 
:00411481    and eax, 7FFF0000                     // mask eax
:00411486    shr eax, 00000010                     // right shift : 12345678 becomes 00001234 
:00411489    ret
</FONT></PRE>
<P><FONT SIZE="2" FACE="Arial">Donc avec KEY_1 = 06A78DE8 nous obtenons : KEY_TMP_1 = 343FD*KEY_1+269EC3 = 1799950B
et eax (la valeur de retour) = (KEY_TMP_1 et 7FFF0000) / 10000 = 00001799 <BR>
Cette partie de code est appel&eacute;e une deuxi&egrave;me fois et la valeur de KEY_TMP_1 est employ&eacute;e
:</FONT></P>
<PRE><FONT SIZE="2" FACE="Courier New">Second_call
-----------
:00411460    mov eax, [004205F4]              // copy KEY_TMP_1 to eax
:00411465    lea ecx, dword ptr [eax+4*eax]   // ecx = 5*eax
:00411468    lea ecx, dword ptr [ecx+4*ecx]   // ecx = 5*ecx = 19*eax 
:0041146B    add ecx, eax                     // ecx = 1A*eax
:0041146D    lea ecx, dword ptr [eax+8*ecx]   // ecx = eax+8*1A*eax = D1*eax
:00411470    shl ecx, 00000008                // ecx = 100*ecx = D100*eax
:00411473    sub ecx, eax                     // ecx = ecx-eax = D0FF*eax
:00411475    lea eax, dword ptr [eax+4*ecx+269EC3] // eax =343FD*eax+269EC3
:0041147C    mov [004205F4], eax  // copy KEY_TMP_2 = eax to DS:4205F4 
:00411481    and eax, 7FFF0000    // mask eax
:00411486    shr eax, 00000010    // right shift : 12345678 becomes 00001234
:00411489    ret</FONT></PRE>
<P><FONT SIZE="2" FACE="Arial">Ainsi avec KEY_TMP_1 = 1799950B nous obtenons :</FONT></P>
<PRE><FONT SIZE="2" FACE="Courier New">	 KEY_TMP_2 = 343FD*KEY_TMP_1+269EC3 = 4411CBA2Et	 </FONT></PRE>
<PRE><FONT SIZE="2" FACE="Courier New">     Eax (valeur retourn&eacute;e) = (KEY_TMP_2 et 7FFF0000) / 10000 &agrave; 00004411</FONT></PRE>
<P><B><FONT SIZE="2" FACE="Arial">===================== <BR>
A5. La routine de contr&ocirc;le<BR>
=====================</FONT></B></P>
<P><FONT SIZE="2" FACE="Arial">Comme nous le verrons bient&ocirc;t, KEY_2 est employ&eacute; imm&eacute;diatement
apr&egrave;s sa g&eacute;n&eacute;ration. Le retour se fait en CS:40B314, et voici ce que vous voyez :</FONT></P>
<PRE><FONT SIZE="2" FACE="Courier New">:00402D73    call 0040B2F0                &lt;--- the place we return from
:00402D78    add esp, 00000004
:00402D7B    cmp eax, dword ptr [esp+258] // compare KEY_2 against KEY_CHK
:00402D82    je 00402DC3                  // jump only if KEY_2 = KEY_CHK
:00402D84    mov eax, dword ptr [esp+14]  // bad guy, let's kick his ass
:00402D88    push eax
* Reference To: KERNEL32.CloseHandle, Ord:0017h
:00402D89    Call dword ptr [0042D4E0]
:00402D8F    mov eax, dword ptr [esp + 10]
:00402D93    push eax
* Possible Reference to String Resource ID=02007: &quot;File: %sThis file was not encrypted with the current key&quot;
:00402D94    push 000007D7
:00402D99    jmp 004033BF      </FONT></PRE>
<P><FONT SIZE="2" FACE="Arial">Nous avons: KEY_2 = 4AB8A581 et KEY_CHK = 6BF6F492</FONT><FONT SIZE="2" FACE="Courier New"><BR>
<BR>
</FONT><FONT SIZE="2" FACE="Arial">Les clefs ne sont pas les identiques, donc Braun refuse de d&eacute;crypter
le fichier.<BR>
Question : d'o&ugrave; vient KEY_CHK ? <BR>
Vous vous rappelez les 276-bytes du header, n'est-ce pas ? <BR>
Il y avait 4 octets myst&eacute;rieux dans ce header :</FONT></P>
<PRE><FONT SIZE="2" FACE="Courier New">  00000000 43 72 79 70 74 6F 48 64 72 42 6C 6B 92 F4 F6 6B CryptoHdrBlk... K 
                                               &lt;-KEY_CHK-&gt;</FONT></PRE>
<P><FONT SIZE="2" FACE="Arial">Cette tr&egrave;s petite clef est employ&eacute;e par Braun pour savoir si le mot
de passe est bon ou non.</FONT></P>
<P><B><FONT SIZE="2" FACE="Arial">========================= <BR>
A6. Le processus de d&eacute;cryptage<BR>
=========================</FONT></B></P>
<P><FONT SIZE="2" FACE="Arial">Si le mot de passe est correct, Braun d&eacute;crypte le fichier. Le processus de
d&eacute;cryptage ne pr&eacute;sente aucun int&eacute;r&ecirc;t, donc je ne le d&eacute;crirai pas ici. La seule
chose importante est que Braun n'emploie pas de mot de passe pour d&eacute;crypter le fichier, mais KEY_1.<BR>
<BR>
Copyright septembre 1999 par Casimir.<BR>
Mail: </FONT><A HREF="mailto:casimir2@club-internet.fr"><FONT SIZE="2" FACE="Arial">Casimir</FONT></A>
<PRE></PRE>

</BODY>

</HTML>